add_packages_to_flavors 'stable' => ['orogen', 'rtt', 'utilmm', 'utilrb', 'typelib', 'rtt_typelib', 'tools/metaruby', 'ocl', 'log4cpp']

in_flavor 'master', 'stable' do
    ruby_package 'gui/vizkit'

    cmake_package 'gui/vizkit3d' do |pkg|
        if Autoproj.manifest.package_enabled?('rtt', false) # the toolchain is built, add it to the rtt_target
            pkg.define "OROCOS_TARGET", user_config('rtt_target')
        end
        Autoproj.env_add_path 'OSG_FILE_PATH', File.join(pkg.prefix, "share", "vizkit" )

        # Add our prefix to the VIZKIT_PLUGIN_RUBY_PATH. Relevant packages will have
        # to list the place where they install themselves
        # TODO the path should be renamed to VIZKIT3D_PLUGIN_PATH
        Autoproj.env_add_path 'VIZKIT_PLUGIN_RUBY_PATH', File.join(pkg.prefix, 'lib')
        Autoproj.env_add_path 'VIZKIT_PLUGIN_RUBY_PATH', File.join(pkg.prefix, 'lib', 'vizkit')
    end

    cmake_package 'base/console_bridge'
    ruby_package 'tools/rubigen' do |pkg|
        pkg.depends_on 'activesupport'
        pkg.depends_on 'bundler'
        pkg.depends_on 'cucumber'
        pkg.rake_setup_task = nil
    end

    bundle_package 'bundles/rock'
    cmake_package 'tools/pocolog_cpp'
    cmake_package 'tools/service_discovery' do |pkg|
        pkg.define "RUBY_EXECUTABLE", Autoproj.find_in_path(RbConfig::CONFIG['RUBY_INSTALL_NAME'])
    end

    ruby_package 'tools/autoproj'
    remove_from_default 'tools/autoproj'
    ruby_package 'tools/autobuild'
    remove_from_default 'tools/autobuild'

    cmake_package 'base/types' do |pkg|
        if package_enabled?('external/sisl')
            pkg.define 'SISL_PREFIX', package('external/sisl').prefix
        end
        Autobuild.env_add_path 'TYPELIB_RUBY_PLUGIN_PATH', File.join(pkg.prefix, "share", "typelib", "ruby")
	pkg.define "RUBY_EXECUTABLE", Autoproj::CmdLine.ruby_executable
    end
    cmake_package 'base/cmake' do |pkg|
        Autobuild.env_add_path 'CMAKE_PREFIX_PATH', pkg.prefix
    end
    import_package 'base/templates/ruby_lib'
    ruby_package 'base/admin_scripts'
    remove_from_default 'base/admin_scripts'

    import_package 'base/doc'
    remove_from_default 'base/doc'

    cmake_package 'base/numeric'

    ruby_package 'base/scripts' do |pkg|
        Autobuild.env_add_path 'ROBY_PLUGIN_PATH', File.join(pkg.srcdir, 'lib', 'rock', 'roby_plugin.rb')
    end

    import_package 'base/templates/cmake_lib' do |pkg|
        env_set "ROCK_TEMPLATE_PREFIX", File.join(File.expand_path('..', pkg.srcdir), '')
        env_set "ROCK_TEMPLATE_SUFFIX", ""
    end

    import_package 'base/templates/cmake_vizkit_widget'
    import_package 'base/templates/vizkit'
    import_package 'base/templates/bundle'
    import_package 'base/templates/doc'

    # Setup bundle support only if base/scripts is enabled 
    if package_enabled?('base/scripts')
        setup_package 'base/scripts' do |pkg|
            bundle_envsh = File.join(Autoproj.root_dir, '.bundle_env.sh')
            if !File.file?(bundle_envsh)
                File.open(bundle_envsh, "w") do |io|
                    io.puts "# File generated by the bundle-default command"
                    io.puts "# Do not change ! Your changes would be overriden !"
                    io.puts "unset ROCK_BUNDLE"
                end
            end
            Autoproj.env_source_file bundle_envsh

            if Autoproj.shell_helpers? && shell = ENV['SHELL']
                shell_kind = File.basename(shell)
                if shell_kind =~ /^\w+$/
                    shell_file = File.join(pkg.srcdir, "shell", shell_kind)

                    if File.file?(shell_file)
                        Autoproj.env_source_file shell_file
                    else
                        # Wait for having imported the package before we add the
                        # file
                        pkg.post_import do
                            if File.exists?(shell_file)
                                Autoproj.env_source_file shell_file
                            end
                        end
                    end
                end
            end
        end
    end

    cmake_package 'external/sisl' do |pkg|
        pkg.define "BUILD_SHARED_LIBS","ON"
        pkg.doc_task do
            pkg.message "copying HTML documentation from %s"
        end # Nothing to do, SISL ships with the generated documentation
        pkg.doc_dir = File.join(pkg.srcdir, 'doc', 'html')
    end

    orogen_package 'base/orogen/std'

    ruby_package 'tools/syskit' do |pkg|
        def pkg.update_environment
            super
            Autoproj.env_add_path 'ROBY_PLUGIN_PATH', File.join(srcdir, "lib", "syskit", "roby_app/register_plugin.rb")
        end
    end

    ruby_package  'tools/orocos.rb' do |pkg|
        def pkg.invoke_rake(target_name = rake_setup_target)
            if test_utility.enabled?
                Autobuild.invoke_make_parallel(self) do |make_options|
                    make_options = make_options.
                        map { |opt| opt.gsub(',', ';') }
                    test_target = "setup:orogen_all[1,#{Autobuild::Orogen.transports.join(" ")},'#{make_options.join("' '")}']"
                    super(test_target)
                end
            end
            super
        end
        if pkg.test_utility.enabled?
            # Move this to the manifest using the modes= attribute as soon as
            # the corresponding support in autoproj is released
            pkg.depends_on 'flexmock'
        end
    end

    ruby_package 'tools/pocolog'
    orogen_package 'tools/logger'
    orogen_package 'base/orogen/types' do |pkg|
        pkg.orogen_file = "base.orogen"
        if package_selected?('external/sisl')
            pkg.define "SISL_PREFIX", package('external/sisl').prefix
        end
        Autoproj.env_set 'ROCK_PREFIX', File.join(pkg.prefix,'share','rock')

        pkg.remove_obsolete_installed_file "share", "typelib", "ruby", "base.rb"
    end

    ruby_package 'tools/roby' do |pkg|
        pkg.doc_dir = File.join('doc', 'html')
    end

    ruby_package  'tools/log_tools' 

    cmake_package 'drivers/aggregator' do |pkg|
        Autoproj.env_add_path 'OROGEN_PLUGIN_PATH', File.join(pkg.prefix, "share", "orogen", "plugins" )
    end
    cmake_package 'drivers/transformer' do |pkg|
        ## Keep this around as long as the refactored transformer is not in
        ## stable
        Autoproj.env_add_path 'OROGEN_PLUGIN_PATH', File.join(pkg.prefix, "share", "orogen", "plugins" )
        Autoproj.env_add_path 'RUBYLIB', File.join(pkg.srcdir, "ruby", "lib")
    end
    orogen_package 'drivers/orogen/aggregator' do |pkg|
        Autoproj.env_add_path 'OROGEN_PLUGIN_PATH', File.join(pkg.prefix, "share", "orogen", "plugins" )
    end
    orogen_package 'drivers/orogen/transformer' do |pkg|
        Autoproj.env_add_path 'OROGEN_PLUGIN_PATH', File.join(pkg.prefix, "share", "orogen", "plugins" )
    end

    cmake_package 'image_processing/jpeg_conversion' do |pkg|
        pkg.define "RUBY_EXECUTABLE", Autoproj::CmdLine.ruby_executable
    end
    cmake_package 'image_processing/frame_helper' do |pkg|
        if Autoproj.manifest.package_enabled?('rtt', false) # the toolchain is built, add it to the rtt_target
            pkg.define "OROCOS_TARGET", user_config('rtt_target')
        end
        pkg.define "RUBY_EXECUTABLE", Autoproj::CmdLine.ruby_executable
    end

    ##### Graphical User Interface related packages 
    cmake_package 'gui/rock_widget_collection' do |pkg|
        Autoproj.env_add_path 'QT_PLUGIN_PATH', File.join(pkg.prefix, "lib", "qt")
    end

end

